{"ast":null,"code":"var _jsxFileName = \"/home/ramegp/Coder/React/context/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState } from \"react\";\nimport { actionTypes, countRealizadas } from \"./provider/reducer\";\nimport { useStateValue } from \"./provider/provider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [{\n    todos,\n    cantidad\n  }, dispatch] = useStateValue();\n  const [text, setText] = useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        dispatch({\n          type: \"add-todo\",\n          text\n        });\n        setText(\"\");\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Cantidad de items \", cantidad, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: 'clear-all-todo'\n      }),\n      children: \"Borrar todos los datos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Lista de tareas:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Realizadas \", countRealizadas(todos)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), todos.map((t, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => dispatch({\n        type: \"toggle-todo\",\n        idx\n      }),\n      style: {\n        textDecoration: t.completed ? \"line-through\" : \"\",\n        color: t.completed ? \"red\" : \"black\",\n        background: t.completed ? \"grey\" : \"violet\",\n        fontSize: t.completed ? \"20px\" : \"16px\"\n      },\n      children: [t.text, /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          onChange: () => dispatch({\n            type: \"clear-selec-todo\",\n            text: t.text\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, t.text, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"746hBJZMk0XYb/SHPxExPrV7qr8=\", false, function () {\n  return [useStateValue];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ramegp/Coder/React/context/src/App.js"],"names":["React","useReducer","useState","actionTypes","countRealizadas","useStateValue","App","todos","cantidad","dispatch","text","setText","e","preventDefault","type","target","value","map","t","idx","textDecoration","completed","color","background","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAGA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,oBAA7C;AACA,SAASC,aAAT,QAA8B,qBAA9B;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAsBC,QAAtB,IAAkCJ,aAAa,EAArD;AAEA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,EAAhC;AAEA,sBAEE;AAAA,4BACE;AACE,MAAA,QAAQ,EAAEU,CAAC,IAAI;AACbA,QAAAA,CAAC,CAACC,cAAF;AACAJ,QAAAA,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE,UAAR;AAAoBJ,UAAAA;AAApB,SAAD,CAAR;AACAC,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD,OALH;AAAA,8BAOE;AAAO,QAAA,KAAK,EAAED,IAAd;AAAoB,QAAA,QAAQ,EAAEE,CAAC,IAAID,OAAO,CAACC,CAAC,CAACG,MAAF,CAASC,KAAV;AAA1C;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAA,yCAAwBR,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAQ,MAAA,OAAO,EAAE,MAAKC,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAC;AAAN,OAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA,gCACcV,eAAe,CAACG,KAAD,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,EAiBGA,KAAK,CAACU,GAAN,CAAU,CAACC,CAAD,EAAIC,GAAJ,kBACT;AAEE,MAAA,OAAO,EAAE,MAAMV,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,aAAR;AAAuBK,QAAAA;AAAvB,OAAD,CAFzB;AAGE,MAAA,KAAK,EAAE;AACLC,QAAAA,cAAc,EAAEF,CAAC,CAACG,SAAF,GAAc,cAAd,GAA+B,EAD1C;AAELC,QAAAA,KAAK,EAAEJ,CAAC,CAACG,SAAF,GAAc,KAAd,GAAsB,OAFxB;AAGLE,QAAAA,UAAU,EAAEL,CAAC,CAACG,SAAF,GAAc,MAAd,GAAuB,QAH9B;AAILG,QAAAA,QAAQ,EAAEN,CAAC,CAACG,SAAF,GAAc,MAAd,GAAqB;AAJ1B,OAHT;AAAA,iBAUGH,CAAC,CAACR,IAVL,eAYE;AAAA,+BACE;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,QAAQ,EAAE,MAC/BD,QAAQ,CAAC;AAACK,YAAAA,IAAI,EAAC,kBAAN;AAAyBJ,YAAAA,IAAI,EAACQ,CAAC,CAACR;AAAhC,WAAD;AADV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA,OACOQ,CAAC,CAACR,IADT;AAAA;AAAA;AAAA;AAAA,YADD,CAjBH;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAyCD,CA/CD;;GAAMJ,G;UAEoCD,a;;;KAFpCC,G;AAiDN,eAAeA,GAAf","sourcesContent":["import React, { useReducer, useState } from \"react\";\n\n\nimport { actionTypes, countRealizadas } from \"./provider/reducer\";\nimport { useStateValue } from \"./provider/provider\";\n\nconst App = () => {\n  \n  const [{ todos, cantidad }, dispatch] = useStateValue();\n\n  const [text, setText] = useState();\n\n  return (\n     \n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          dispatch({ type: \"add-todo\", text });\n          setText(\"\");\n        }}\n      >\n        <input value={text} onChange={e => setText(e.target.value)} />\n        <div>Cantidad de items {cantidad} </div>  \n      </form>\n      \n      <button onClick={()=> dispatch({type:'clear-all-todo'})}>Borrar todos los datos</button>\n      <div>Lista de tareas:</div>\n      <div>\n        Realizadas {countRealizadas(todos)}\n      </div>\n      {todos.map((t, idx) => (\n        <div\n          key={t.text}\n          onClick={() => dispatch({ type: \"toggle-todo\", idx })}\n          style={{\n            textDecoration: t.completed ? \"line-through\" : \"\",\n            color: t.completed ? \"red\" : \"black\",\n            background: t.completed ? \"grey\" : \"violet\",\n            fontSize: t.completed ? \"20px\":\"16px\"\n          }}\n        >\n          {t.text}\n\n          <label>\n            <input type=\"checkbox\" onChange={()=>(\n              dispatch({type:\"clear-selec-todo\",text:t.text}))}/>\n          </label>\n\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}